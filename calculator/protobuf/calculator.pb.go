// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calculator/protobuf/calculator.proto

package protobuf

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SumRequest struct {
	Num1                 float32  `protobuf:"fixed32,1,opt,name=num1,proto3" json:"num1,omitempty"`
	Num2                 float32  `protobuf:"fixed32,2,opt,name=num2,proto3" json:"num2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SumRequest) Reset()         { *m = SumRequest{} }
func (m *SumRequest) String() string { return proto.CompactTextString(m) }
func (*SumRequest) ProtoMessage()    {}
func (*SumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11082050701874eb, []int{0}
}

func (m *SumRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SumRequest.Unmarshal(m, b)
}
func (m *SumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SumRequest.Marshal(b, m, deterministic)
}
func (m *SumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumRequest.Merge(m, src)
}
func (m *SumRequest) XXX_Size() int {
	return xxx_messageInfo_SumRequest.Size(m)
}
func (m *SumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SumRequest proto.InternalMessageInfo

func (m *SumRequest) GetNum1() float32 {
	if m != nil {
		return m.Num1
	}
	return 0
}

func (m *SumRequest) GetNum2() float32 {
	if m != nil {
		return m.Num2
	}
	return 0
}

type SumResponse struct {
	Summation            float32  `protobuf:"fixed32,1,opt,name=summation,proto3" json:"summation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SumResponse) Reset()         { *m = SumResponse{} }
func (m *SumResponse) String() string { return proto.CompactTextString(m) }
func (*SumResponse) ProtoMessage()    {}
func (*SumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11082050701874eb, []int{1}
}

func (m *SumResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SumResponse.Unmarshal(m, b)
}
func (m *SumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SumResponse.Marshal(b, m, deterministic)
}
func (m *SumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumResponse.Merge(m, src)
}
func (m *SumResponse) XXX_Size() int {
	return xxx_messageInfo_SumResponse.Size(m)
}
func (m *SumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SumResponse proto.InternalMessageInfo

func (m *SumResponse) GetSummation() float32 {
	if m != nil {
		return m.Summation
	}
	return 0
}

type PrimeNumberRequest struct {
	Number               int64    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrimeNumberRequest) Reset()         { *m = PrimeNumberRequest{} }
func (m *PrimeNumberRequest) String() string { return proto.CompactTextString(m) }
func (*PrimeNumberRequest) ProtoMessage()    {}
func (*PrimeNumberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11082050701874eb, []int{2}
}

func (m *PrimeNumberRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrimeNumberRequest.Unmarshal(m, b)
}
func (m *PrimeNumberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrimeNumberRequest.Marshal(b, m, deterministic)
}
func (m *PrimeNumberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimeNumberRequest.Merge(m, src)
}
func (m *PrimeNumberRequest) XXX_Size() int {
	return xxx_messageInfo_PrimeNumberRequest.Size(m)
}
func (m *PrimeNumberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimeNumberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrimeNumberRequest proto.InternalMessageInfo

func (m *PrimeNumberRequest) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type PrimeNumberResponse struct {
	PrimeNumber          int64    `protobuf:"varint,1,opt,name=primeNumber,proto3" json:"primeNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrimeNumberResponse) Reset()         { *m = PrimeNumberResponse{} }
func (m *PrimeNumberResponse) String() string { return proto.CompactTextString(m) }
func (*PrimeNumberResponse) ProtoMessage()    {}
func (*PrimeNumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11082050701874eb, []int{3}
}

func (m *PrimeNumberResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrimeNumberResponse.Unmarshal(m, b)
}
func (m *PrimeNumberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrimeNumberResponse.Marshal(b, m, deterministic)
}
func (m *PrimeNumberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimeNumberResponse.Merge(m, src)
}
func (m *PrimeNumberResponse) XXX_Size() int {
	return xxx_messageInfo_PrimeNumberResponse.Size(m)
}
func (m *PrimeNumberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimeNumberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrimeNumberResponse proto.InternalMessageInfo

func (m *PrimeNumberResponse) GetPrimeNumber() int64 {
	if m != nil {
		return m.PrimeNumber
	}
	return 0
}

type ComputeAverageRequest struct {
	Number               float32  `protobuf:"fixed32,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComputeAverageRequest) Reset()         { *m = ComputeAverageRequest{} }
func (m *ComputeAverageRequest) String() string { return proto.CompactTextString(m) }
func (*ComputeAverageRequest) ProtoMessage()    {}
func (*ComputeAverageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11082050701874eb, []int{4}
}

func (m *ComputeAverageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComputeAverageRequest.Unmarshal(m, b)
}
func (m *ComputeAverageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComputeAverageRequest.Marshal(b, m, deterministic)
}
func (m *ComputeAverageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeAverageRequest.Merge(m, src)
}
func (m *ComputeAverageRequest) XXX_Size() int {
	return xxx_messageInfo_ComputeAverageRequest.Size(m)
}
func (m *ComputeAverageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeAverageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeAverageRequest proto.InternalMessageInfo

func (m *ComputeAverageRequest) GetNumber() float32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type ComputeAverageResponse struct {
	Result               float32  `protobuf:"fixed32,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComputeAverageResponse) Reset()         { *m = ComputeAverageResponse{} }
func (m *ComputeAverageResponse) String() string { return proto.CompactTextString(m) }
func (*ComputeAverageResponse) ProtoMessage()    {}
func (*ComputeAverageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11082050701874eb, []int{5}
}

func (m *ComputeAverageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComputeAverageResponse.Unmarshal(m, b)
}
func (m *ComputeAverageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComputeAverageResponse.Marshal(b, m, deterministic)
}
func (m *ComputeAverageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeAverageResponse.Merge(m, src)
}
func (m *ComputeAverageResponse) XXX_Size() int {
	return xxx_messageInfo_ComputeAverageResponse.Size(m)
}
func (m *ComputeAverageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeAverageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeAverageResponse proto.InternalMessageInfo

func (m *ComputeAverageResponse) GetResult() float32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type ComputeMaximumRequest struct {
	Number               float32  `protobuf:"fixed32,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComputeMaximumRequest) Reset()         { *m = ComputeMaximumRequest{} }
func (m *ComputeMaximumRequest) String() string { return proto.CompactTextString(m) }
func (*ComputeMaximumRequest) ProtoMessage()    {}
func (*ComputeMaximumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11082050701874eb, []int{6}
}

func (m *ComputeMaximumRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComputeMaximumRequest.Unmarshal(m, b)
}
func (m *ComputeMaximumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComputeMaximumRequest.Marshal(b, m, deterministic)
}
func (m *ComputeMaximumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeMaximumRequest.Merge(m, src)
}
func (m *ComputeMaximumRequest) XXX_Size() int {
	return xxx_messageInfo_ComputeMaximumRequest.Size(m)
}
func (m *ComputeMaximumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeMaximumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeMaximumRequest proto.InternalMessageInfo

func (m *ComputeMaximumRequest) GetNumber() float32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type ComputeMaximumResponse struct {
	MaxNumber            float32  `protobuf:"fixed32,1,opt,name=maxNumber,proto3" json:"maxNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComputeMaximumResponse) Reset()         { *m = ComputeMaximumResponse{} }
func (m *ComputeMaximumResponse) String() string { return proto.CompactTextString(m) }
func (*ComputeMaximumResponse) ProtoMessage()    {}
func (*ComputeMaximumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11082050701874eb, []int{7}
}

func (m *ComputeMaximumResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComputeMaximumResponse.Unmarshal(m, b)
}
func (m *ComputeMaximumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComputeMaximumResponse.Marshal(b, m, deterministic)
}
func (m *ComputeMaximumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeMaximumResponse.Merge(m, src)
}
func (m *ComputeMaximumResponse) XXX_Size() int {
	return xxx_messageInfo_ComputeMaximumResponse.Size(m)
}
func (m *ComputeMaximumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeMaximumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeMaximumResponse proto.InternalMessageInfo

func (m *ComputeMaximumResponse) GetMaxNumber() float32 {
	if m != nil {
		return m.MaxNumber
	}
	return 0
}

type SquareRootRequest struct {
	Number               float32  `protobuf:"fixed32,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SquareRootRequest) Reset()         { *m = SquareRootRequest{} }
func (m *SquareRootRequest) String() string { return proto.CompactTextString(m) }
func (*SquareRootRequest) ProtoMessage()    {}
func (*SquareRootRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11082050701874eb, []int{8}
}

func (m *SquareRootRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SquareRootRequest.Unmarshal(m, b)
}
func (m *SquareRootRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SquareRootRequest.Marshal(b, m, deterministic)
}
func (m *SquareRootRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SquareRootRequest.Merge(m, src)
}
func (m *SquareRootRequest) XXX_Size() int {
	return xxx_messageInfo_SquareRootRequest.Size(m)
}
func (m *SquareRootRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SquareRootRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SquareRootRequest proto.InternalMessageInfo

func (m *SquareRootRequest) GetNumber() float32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type SquareRootResponse struct {
	SquareRoot           float32  `protobuf:"fixed32,1,opt,name=squareRoot,proto3" json:"squareRoot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SquareRootResponse) Reset()         { *m = SquareRootResponse{} }
func (m *SquareRootResponse) String() string { return proto.CompactTextString(m) }
func (*SquareRootResponse) ProtoMessage()    {}
func (*SquareRootResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11082050701874eb, []int{9}
}

func (m *SquareRootResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SquareRootResponse.Unmarshal(m, b)
}
func (m *SquareRootResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SquareRootResponse.Marshal(b, m, deterministic)
}
func (m *SquareRootResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SquareRootResponse.Merge(m, src)
}
func (m *SquareRootResponse) XXX_Size() int {
	return xxx_messageInfo_SquareRootResponse.Size(m)
}
func (m *SquareRootResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SquareRootResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SquareRootResponse proto.InternalMessageInfo

func (m *SquareRootResponse) GetSquareRoot() float32 {
	if m != nil {
		return m.SquareRoot
	}
	return 0
}

func init() {
	proto.RegisterType((*SumRequest)(nil), "calculator.sumRequest")
	proto.RegisterType((*SumResponse)(nil), "calculator.sumResponse")
	proto.RegisterType((*PrimeNumberRequest)(nil), "calculator.primeNumberRequest")
	proto.RegisterType((*PrimeNumberResponse)(nil), "calculator.primeNumberResponse")
	proto.RegisterType((*ComputeAverageRequest)(nil), "calculator.computeAverageRequest")
	proto.RegisterType((*ComputeAverageResponse)(nil), "calculator.computeAverageResponse")
	proto.RegisterType((*ComputeMaximumRequest)(nil), "calculator.computeMaximumRequest")
	proto.RegisterType((*ComputeMaximumResponse)(nil), "calculator.computeMaximumResponse")
	proto.RegisterType((*SquareRootRequest)(nil), "calculator.squareRootRequest")
	proto.RegisterType((*SquareRootResponse)(nil), "calculator.squareRootResponse")
}

func init() {
	proto.RegisterFile("calculator/protobuf/calculator.proto", fileDescriptor_11082050701874eb)
}

var fileDescriptor_11082050701874eb = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0x5f, 0x6f, 0xda, 0x30,
	0x14, 0xc5, 0x17, 0x98, 0xd0, 0x76, 0x91, 0x26, 0x71, 0xa7, 0x65, 0x28, 0xda, 0x28, 0xb5, 0xfa,
	0x80, 0x44, 0x05, 0x94, 0xa2, 0xb6, 0xaf, 0xfd, 0xf3, 0x0a, 0x0f, 0xe9, 0x5b, 0xab, 0xaa, 0x0a,
	0x91, 0x5b, 0x45, 0xc2, 0x71, 0xb0, 0x63, 0xc4, 0x57, 0xeb, 0xb7, 0xab, 0x08, 0x4e, 0xec, 0xa4,
	0xa1, 0x7d, 0xb3, 0x7f, 0xf6, 0x39, 0x47, 0xf1, 0xb9, 0x81, 0x93, 0x30, 0x58, 0x85, 0x6a, 0x15,
	0xa4, 0x5c, 0x8c, 0x13, 0xc1, 0x53, 0xbe, 0x54, 0x2f, 0x63, 0xc3, 0x46, 0x19, 0x43, 0x30, 0x84,
	0xcc, 0x00, 0xa4, 0x62, 0x3e, 0x5d, 0x2b, 0x2a, 0x53, 0x44, 0xf8, 0x1e, 0x2b, 0x76, 0xd6, 0x75,
	0xfa, 0xce, 0xa0, 0xe1, 0x67, 0x6b, 0xcd, 0xa6, 0xdd, 0x46, 0xc1, 0xa6, 0x64, 0x08, 0xed, 0x4c,
	0x25, 0x13, 0x1e, 0x4b, 0x8a, 0xff, 0xe0, 0xa7, 0x54, 0x8c, 0x05, 0x69, 0xc4, 0x63, 0xad, 0x35,
	0x80, 0x9c, 0x02, 0x26, 0x22, 0x62, 0x74, 0xa1, 0xd8, 0x92, 0x8a, 0x3c, 0xca, 0x85, 0x56, 0x9c,
	0x81, 0x4c, 0xd0, 0xf4, 0xf5, 0x8e, 0x5c, 0xc2, 0xef, 0xd2, 0x6d, 0x1d, 0xd1, 0x87, 0xb6, 0x85,
	0xb5, 0xc6, 0x46, 0x64, 0x0c, 0x7f, 0x42, 0xce, 0x12, 0x95, 0xd2, 0xeb, 0x0d, 0x15, 0xc1, 0x2b,
	0xad, 0x4f, 0x6a, 0x14, 0x49, 0x13, 0x70, 0xab, 0x02, 0x1d, 0xe6, 0x42, 0x4b, 0x50, 0xa9, 0x56,
	0x69, 0xae, 0xd8, 0xef, 0xac, 0x88, 0x79, 0xb0, 0x8d, 0x98, 0x79, 0xb7, 0x43, 0x11, 0x17, 0x45,
	0x44, 0x21, 0x30, 0x4f, 0xc6, 0x82, 0xed, 0xc2, 0x16, 0x19, 0x40, 0x86, 0xd0, 0x91, 0x6b, 0x15,
	0x08, 0xea, 0x73, 0x9e, 0x7e, 0x15, 0x32, 0x03, 0xb4, 0x2f, 0xeb, 0x80, 0x1e, 0x80, 0xa1, 0x5a,
	0x61, 0x91, 0xe9, 0x5b, 0x13, 0x3a, 0xb7, 0xc5, 0x1c, 0xdc, 0x53, 0xb1, 0x89, 0x42, 0x8a, 0x57,
	0xd0, 0x94, 0x8a, 0xa1, 0x3b, 0xb2, 0x86, 0xc6, 0xcc, 0x87, 0xf7, 0xf7, 0x03, 0xdf, 0xa7, 0x91,
	0x6f, 0xf8, 0x0c, 0x5d, 0xab, 0x8d, 0x3b, 0xba, 0xfb, 0x6e, 0x2e, 0xa3, 0xdd, 0x04, 0x60, 0x6f,
	0x54, 0x9a, 0xc1, 0xea, 0x2c, 0x78, 0x47, 0x07, 0xcf, 0x73, 0xfb, 0x89, 0x83, 0x8f, 0xf0, 0xab,
	0x5c, 0x17, 0x1e, 0xdb, 0xb2, 0xda, 0xee, 0x3d, 0xf2, 0xd9, 0x95, 0xdc, 0x7c, 0xe0, 0xe0, 0x53,
	0x61, 0xae, 0x8b, 0xaa, 0x35, 0x2f, 0xb7, 0x5e, 0x6b, 0x5e, 0xe9, 0x79, 0x67, 0x3e, 0x71, 0x70,
	0x6e, 0x97, 0x81, 0xff, 0x4b, 0xaf, 0x58, 0xed, 0xd9, 0xeb, 0x1d, 0x3a, 0xce, 0x2d, 0x6f, 0xe0,
	0xe1, 0x47, 0xfe, 0x77, 0x2f, 0x5b, 0xd9, 0xea, 0xfc, 0x3d, 0x00, 0x00, 0xff, 0xff, 0xd9, 0xa9,
	0x05, 0xfd, 0xfb, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalculatorServiceClient is the client API for CalculatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculatorServiceClient interface {
	Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error)
	PrimeNumberDecomposition(ctx context.Context, in *PrimeNumberRequest, opts ...grpc.CallOption) (CalculatorService_PrimeNumberDecompositionClient, error)
	ComputeAverage(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_ComputeAverageClient, error)
	ComputeMaximum(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_ComputeMaximumClient, error)
	SquareRoot(ctx context.Context, in *SquareRootRequest, opts ...grpc.CallOption) (*SquareRootResponse, error)
}

type calculatorServiceClient struct {
	cc *grpc.ClientConn
}

func NewCalculatorServiceClient(cc *grpc.ClientConn) CalculatorServiceClient {
	return &calculatorServiceClient{cc}
}

func (c *calculatorServiceClient) Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, "/calculator.CalculatorService/sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorServiceClient) PrimeNumberDecomposition(ctx context.Context, in *PrimeNumberRequest, opts ...grpc.CallOption) (CalculatorService_PrimeNumberDecompositionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalculatorService_serviceDesc.Streams[0], "/calculator.CalculatorService/primeNumberDecomposition", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServicePrimeNumberDecompositionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalculatorService_PrimeNumberDecompositionClient interface {
	Recv() (*PrimeNumberResponse, error)
	grpc.ClientStream
}

type calculatorServicePrimeNumberDecompositionClient struct {
	grpc.ClientStream
}

func (x *calculatorServicePrimeNumberDecompositionClient) Recv() (*PrimeNumberResponse, error) {
	m := new(PrimeNumberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) ComputeAverage(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_ComputeAverageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalculatorService_serviceDesc.Streams[1], "/calculator.CalculatorService/computeAverage", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceComputeAverageClient{stream}
	return x, nil
}

type CalculatorService_ComputeAverageClient interface {
	Send(*ComputeAverageRequest) error
	CloseAndRecv() (*ComputeAverageResponse, error)
	grpc.ClientStream
}

type calculatorServiceComputeAverageClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceComputeAverageClient) Send(m *ComputeAverageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceComputeAverageClient) CloseAndRecv() (*ComputeAverageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ComputeAverageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) ComputeMaximum(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_ComputeMaximumClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalculatorService_serviceDesc.Streams[2], "/calculator.CalculatorService/computeMaximum", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceComputeMaximumClient{stream}
	return x, nil
}

type CalculatorService_ComputeMaximumClient interface {
	Send(*ComputeMaximumRequest) error
	Recv() (*ComputeMaximumResponse, error)
	grpc.ClientStream
}

type calculatorServiceComputeMaximumClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceComputeMaximumClient) Send(m *ComputeMaximumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceComputeMaximumClient) Recv() (*ComputeMaximumResponse, error) {
	m := new(ComputeMaximumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) SquareRoot(ctx context.Context, in *SquareRootRequest, opts ...grpc.CallOption) (*SquareRootResponse, error) {
	out := new(SquareRootResponse)
	err := c.cc.Invoke(ctx, "/calculator.CalculatorService/squareRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculatorServiceServer is the server API for CalculatorService service.
type CalculatorServiceServer interface {
	Sum(context.Context, *SumRequest) (*SumResponse, error)
	PrimeNumberDecomposition(*PrimeNumberRequest, CalculatorService_PrimeNumberDecompositionServer) error
	ComputeAverage(CalculatorService_ComputeAverageServer) error
	ComputeMaximum(CalculatorService_ComputeMaximumServer) error
	SquareRoot(context.Context, *SquareRootRequest) (*SquareRootResponse, error)
}

// UnimplementedCalculatorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCalculatorServiceServer struct {
}

func (*UnimplementedCalculatorServiceServer) Sum(ctx context.Context, req *SumRequest) (*SumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (*UnimplementedCalculatorServiceServer) PrimeNumberDecomposition(req *PrimeNumberRequest, srv CalculatorService_PrimeNumberDecompositionServer) error {
	return status.Errorf(codes.Unimplemented, "method PrimeNumberDecomposition not implemented")
}
func (*UnimplementedCalculatorServiceServer) ComputeAverage(srv CalculatorService_ComputeAverageServer) error {
	return status.Errorf(codes.Unimplemented, "method ComputeAverage not implemented")
}
func (*UnimplementedCalculatorServiceServer) ComputeMaximum(srv CalculatorService_ComputeMaximumServer) error {
	return status.Errorf(codes.Unimplemented, "method ComputeMaximum not implemented")
}
func (*UnimplementedCalculatorServiceServer) SquareRoot(ctx context.Context, req *SquareRootRequest) (*SquareRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SquareRoot not implemented")
}

func RegisterCalculatorServiceServer(s *grpc.Server, srv CalculatorServiceServer) {
	s.RegisterService(&_CalculatorService_serviceDesc, srv)
}

func _CalculatorService_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServiceServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.CalculatorService/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServiceServer).Sum(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculatorService_PrimeNumberDecomposition_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeNumberRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculatorServiceServer).PrimeNumberDecomposition(m, &calculatorServicePrimeNumberDecompositionServer{stream})
}

type CalculatorService_PrimeNumberDecompositionServer interface {
	Send(*PrimeNumberResponse) error
	grpc.ServerStream
}

type calculatorServicePrimeNumberDecompositionServer struct {
	grpc.ServerStream
}

func (x *calculatorServicePrimeNumberDecompositionServer) Send(m *PrimeNumberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalculatorService_ComputeAverage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).ComputeAverage(&calculatorServiceComputeAverageServer{stream})
}

type CalculatorService_ComputeAverageServer interface {
	SendAndClose(*ComputeAverageResponse) error
	Recv() (*ComputeAverageRequest, error)
	grpc.ServerStream
}

type calculatorServiceComputeAverageServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceComputeAverageServer) SendAndClose(m *ComputeAverageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceComputeAverageServer) Recv() (*ComputeAverageRequest, error) {
	m := new(ComputeAverageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CalculatorService_ComputeMaximum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).ComputeMaximum(&calculatorServiceComputeMaximumServer{stream})
}

type CalculatorService_ComputeMaximumServer interface {
	Send(*ComputeMaximumResponse) error
	Recv() (*ComputeMaximumRequest, error)
	grpc.ServerStream
}

type calculatorServiceComputeMaximumServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceComputeMaximumServer) Send(m *ComputeMaximumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceComputeMaximumServer) Recv() (*ComputeMaximumRequest, error) {
	m := new(ComputeMaximumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CalculatorService_SquareRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SquareRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServiceServer).SquareRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.CalculatorService/SquareRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServiceServer).SquareRoot(ctx, req.(*SquareRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CalculatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.CalculatorService",
	HandlerType: (*CalculatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sum",
			Handler:    _CalculatorService_Sum_Handler,
		},
		{
			MethodName: "squareRoot",
			Handler:    _CalculatorService_SquareRoot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "primeNumberDecomposition",
			Handler:       _CalculatorService_PrimeNumberDecomposition_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "computeAverage",
			Handler:       _CalculatorService_ComputeAverage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "computeMaximum",
			Handler:       _CalculatorService_ComputeMaximum_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calculator/protobuf/calculator.proto",
}
